kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: workdir
spec:
  accessModes: 
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi # make this bigger in production
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ipfs-node
  labels:
    name: ipfs-node
spec:
  replicas: 1
  selector:
    matchLabels: 
      app: ipfs-node
  template:
    metadata:
      labels:
        app: ipfs-node
        role: node
    spec:

      volumes:
      - name: workdir
        persistentVolumeClaim:
          claimName: workdir

      containers:
      - name: go-ipfs
        image: "ipfs/go-ipfs"
        ports:
            - name: swarm
              protocol: TCP
              containerPort: 4001
            - name: swarm-udp
              protocol: UDP
              containerPort: 4002
            - name: ipfs-daemon-api
              protocol: TCP
              containerPort: 5001
            - name: ws
              protocol: TCP
              containerPort: 8081
            - name: http
              protocol: TCP
              containerPort: 8080
        resources:
          requests:
            cpu: 100m

---
  apiVersion: v1
  kind: Service
  metadata:
    name: ipfs-gateway
    labels:
      app: ipfs-node
  spec:
    type: LoadBalancer
    ports:
      - name: http
        targetPort: http
        port: 8080
    selector:
      app: ipfs-node

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
      grpc_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;

spec:
  rules:
  - host:
    http:
      paths:
      - backend:
          serviceName: ipfs-gateway
          servicePort: 8080
